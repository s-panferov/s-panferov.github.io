---
layout: post
title: "Собеседование на разработчика Ruby. Часть 1"
date: 2013-03-28 12:00
comments: false
categories:
---

Итак, вы решили устраиваться на работу рубистом. Какие вопросы вам могут задать на собеседовании и как на них правильно отвечать? Где искать ответы на каверзные вопросы? О чем спрашивают джуниоров, сеньеров и миддлов?

Данная статья не даст вам ответы на все вопросы, но я постараюсь описать те вопросы, которые задавали мне и которые обычно задавал я на основе личного опыта. Я намеренно не буду ассоциировать вопросы и конкретные компании.

<!--more-->

В разных компаниях собеседование проводят по-разному и уж точно нет никакого стандартного плана. Поэтому я не буду сосредотачиваться на каких-то этапах, а просто буду приводить вопросы и ответы на некоторые их них. Пожалуйста, не воспринимайте мои ответы как истину в последней инстанции, ведь я даю ответы на основе своего собственного опыта.

## Базовые алгоритмы и Computer Science

Итак, первая категория вопросов относится к базовым вещам в компьютерной науке. Такими вопросами любят мучить джуниуров, приходящих на собеседование по любому языку программирования, не обязательно Ruby. Дело в том, что у представителей данного класса программистов еще недостаточно жизненного опыта в конкретной технологии, а знание основы показывает, могут ли они мыслить как программисты.

**Q: Расскажите, какие вы знаете базовые типы данных?**

**Q: Расскажите, что такое Стек. Какие примеры реализации стека вы можете привести?**

**Q: Что такое LIFO, FIFO?**

**Q: Как вы будете сортировать массив из N чисел.**

**Q: Что такое вычислительная сложность алгоритма. Какую вычислительную сложность имеет алгоритм бинарного поиска в отсортированном массиве?**

**Q: Что такое двоичное дерево?**

**Q: Как в современных языках программирования реализованы ассоциативные массивы?**

**Q: <span class='label'>Задача</span> Напишите алгоритм сортировки массива методом QuickSort**

**Q: <span class='label'>Задача</span> Представте, что вы разрабатываете электронное казино. Вам выдали 56 карт. Напишите алгоритим перемешивания карт.**

**Q: <span class='label'>Задача</span> Запрограммируйте перевод числа из 10-й в двоичную систему исчисления**

Ответы на эти и другие подобные вопросы покажет, знаете ли вы основы, на которых строится вся современная компьютерная индустрия. Для того, чтобы быстро подготовиться к таким вопросам, я рекомендую курс [Algorithms, Part I](https://class.coursera.org/algs4partI-002/class/index). Если же вы хотите получить более фундаментальные и серьезные знания, то стоит почитать ["Искусство программирования" Дональда Кнута](http://www.ozon.ru/?context=search&text=%ca%ed%f3%f2+%c8%f1%ea%f3%f1%f1%f2%e2%ee&bests=1).

## Парадигмы программирования

Итак, вы успешно подготовились к вопросам категории "Базовые алгоритмы" (или может вы олимпиадник со стажем). Далее вам стоит стряхнуть пыль с тех полок вашего мозга, на которых хранятся ответы на следующие вопросы:

**Q: Какие основные фундаментальные парадигмы программирования существуют?**

В ответ ожидается перечисление:

* Логическое
* Императивное
* Функциональное

Если вы вдруг в тот же ряд поставите ООП, то это несколько снизит ценность вашего ответа, так как ООП — понятие, лежащее в другой плоскости. Хуже всего, если вы с него начнете и им же закончите.

**Q: Опишите базовые концепции императивного программирования?**

*A:* Императивное программирование предполагает оперирование набором иструкций, которые может выполнить программа и состоянием, которое изменяется при помощи этих инструкций.

**Q: Можно ли на Ruby программировать в фукнциональном стиле? Какие особенности языка позволяют нам это делать?**

*A:* Функциональное программирование завязано вокруг функций, поэтому функция должна быть объектом первого рода (first-class object). В любом месте функцию можно создать (анонимная функция), можно присвоить переменной, можно передать в функцию в качестве аргументов, можно вернуть из функции в качестве результата. Все это можно делать в Ruby при помощи таких объектов как Proc. Также в Ruby поддерживаются замыкания.

**Q: Расскажите, что такое ООП? Соблюдение каких трех ключевых принципов предполагает ООП?**

**Q: Что такое класс?**

**Q: Чем в Ruby класс отличается от модуля?**

**Q: Поддерживает ли Ruby наследование классов? А множественное наследование?**

**Q: Что такое абстрактный класс? Существует ли в Ruby понятие абстрактного класса?**

**Q: Чем абстрактный класс отличается от интерфейса? Существует ли в Ruby понятие интерфейса?**

**Q: <span class='label'>Задача</span> Напишите на Ruby вычисление факториала в функциональном стиле**

**Q: <span class='label'>Задача</span> Напишите на Ruby вычисление факториала в императивном стиле**

**Q: <span class='label'>Задача</span> Опишите плюсы и минусы двух реализаций**
