---
layout: post
title:  "Promise и Deferred. Часть 1. Введение."
date:   2013-11-17 21:00
languages: JavaScript
categories:
---

## Простыми словами

Promise - в переводе с английского "обещание" - объект, позволяющий получить доступ к результату операции, которая могла еще не закончиться. Если вы пытаетесь использовать значение promise, а связанная с ним операция еще не завершена, то обработчик будет выполнен после завершения операции.

Предположим, вы хотите выполнить большой и сложный SQL-запрос, ждать выполнения которого придется не меньше 10-и секунд. В синхронном стиле мы написали бы что-то вроде:

~~~js
result = query('select * from big_table'); // занимает 10 секунд
~~~

<!--more-->

Данный код очень прост и понятен, но в таком случае ваша программа будет простаивать 10 секунд до получения резуальтата синхронной операции. Иногда это приемлено, но бывают ситуации, когда в это время можно сделать что-то еще, например, обработать запрос другого пользователя.

Вы можете использовать асинхронный подход и вернуть управление своей программе сразу же после выполнения запроса. Вы можете сделать это при помощи коллбека:

~~~js
query('select * from big_table', function(result) {
	 /* этот код будет вызван через 10 секунд */
});
~~~

В данном примере вы передаете в callback-функцию, которая будет вызвана с результатом после окончания обработки вашего запроса. Это довольно просто для понимания и решает нашу проблему - наша программа теперь может продолжить выполнение и не ждать окончания операции. Основное беспокойство в этом подходе вызывает тот факт, что проследить этапы выполнения программы становится сложнее, потому что порядок выполнения операций не так очевиден, как при использовании синхронного стиля. Также довольно сложно будет обеспечить выполнение операций вида "сделай A, B и С, а потом D".

Тут на помощь приходят промисы. Вместо использования коллбека query может вернуть нам promise:

~~~js
promise = query(...); // Возвращает управление сразу же
~~~

В данном случае управление возвращается в наш код сразу же, а запрос выполняется в фоновом режиме. Основная идея в том, что promise не содержит результат операции на этом этапе. Если вы захотите что-то сделать с результатами операции - ваши действия будут отложены до фактического получения результата выполнения запроса.

~~~js
promise = query(...); // Возвращает управление сразу.
do_something_with(promise); // Выполняется через 10 секунд.
~~~

Вы по прежнему можете сделать что-нибудь еще, пока ожидаете результата выполнения запроса:

~~~js
promise = query(...); // Возвращает управление сразу.
do_something_else(); // Выполняется сразу.
do_something_with(result_promise); // Выполняется через 10 секунд.
~~~

Основная польза от промисов в том, что иногда с их помощью можно сделать код чище, чем при использовании коллбек-функций: вам не нужно писать множество анонимных функций, операции, которым не нужен результат, могут быть выполнены сразу же.

Промисы могут дать вам основные преимещуства коллбек-фукнций (асинхронное выполнение вашего кода) и при этом позволяют вам писать чистый и простой в поддержке код. Вы получаете код, который выглядит почти так же, как синхронный, но выполняется он асинхронно.

## Источники

* [Этот ответ на Quora](http://www.quora.com/JavaScript/What-is-the-promise-pattern)
