---
layout: post
title:  "JsonWay - JSON building DSL and configurable serializers for Rust "
date:   2014-10-14 12:00
languages: Rust
categories:
---

[JsonWay] gives you a simple DSL for declaring JSON structures. This is particularly helpful when the generation process is fraught with conditionals and loops.

It is inspired by [jbuilder](https://github.com/rails/jbuilder) and has similar functional.

## Building JSON

```rust
ObjectBuilder::build(|json| {
    json.set("first_name", "Luke".to_string()); 
    json.set("last_name", "Skywalker".to_string());

    json.object("info", |json| {
        json.set("homeworld", "Tatooine".to_string());
        json.set("born", "19 BBY".to_string());
        json.set("died", "Between 45 ABY and 137 ABY".to_string());
    });

    json.list("masters", |json| {
        json.push("Obi-Wan Kenobi".to_string());
        json.push("Yoda".to_string());
        json.push("Joruus C'baoth (Briefly)".to_string());
        json.push("Darth Sidious (Briefly)".to_string());
    });
});
```

## Serializing objects

```rust
use jsonway::{ObjectBuilder, ObjectSerializer};

struct Jedi {
    name: String
}

struct JediSerializer;

impl ObjectSerializer<Jedi> for JediSerializer {
    fn root(&self) -> Option<&str> { Some("jedi") }
    fn build(&self, jedi: &Jedi, json: &mut ObjectBuilder) {
        json.set("name", jedi.name.to_string());
    }
}

let jedi = Jedi { name: "Saes Rrogon".to_string() };
let json = JediSerializer.serialize(&jedi);
```

Check [JsonWay] on GitHub.

[JsonWay]: https://github.com/rustless/jsonway